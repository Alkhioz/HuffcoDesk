/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package codificadorhuffman;


import java.awt.Toolkit;
import java.text.DecimalFormat;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class principal extends javax.swing.JFrame {

    /**
     * Creates new form principal
     */
    public principal() {
        //setUndecorated(true);   
        //setOpacity(0.92f);
        initComponents();
        setLocationRelativeTo(null);
        setIconImage(Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("imagenes/ico.png")));
        }
  ARBOL_HUFFMAN tree;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        texto = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CODIFICADOR HUFFMAN");
        setBackground(new java.awt.Color(255, 51, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Simbolo", "Repeticiones", "Frecuencia", "Codigo"
            }
        ));
        tabla.setFocusable(false);
        jScrollPane2.setViewportView(tabla);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 62, 373, 227));

        texto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoActionPerformed(evt);
            }
        });
        texto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textoKeyPressed(evt);
            }
        });
        getContentPane().add(texto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 373, 33));

        jPanel1.setBackground(new java.awt.Color(255, 102, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoActionPerformed

    private void textoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoKeyPressed
        // TODO add your handling code here:
        if(task != null)task.cancel();
                task = new TimerTask() {
                    @Override
                    public void run() {
                        codificar();
                    }
                };
                timer.schedule(task, 1000);
    }//GEN-LAST:event_textoKeyPressed
  Timer timer = new Timer(true);
  TimerTask task = null;
  String test_anterior=null;
  public void codificar(){
  String test = texto.getText();
        if(!test.equals("")&&!test.equals(test_anterior)){
        codificador code=new codificador();
        // we will assume that all our characters will have
        // code less than 256, for simplicity
        int[] charFreqs = new int[256];
        // read each character and record the frequencies
        for (char c : test.toCharArray())
            charFreqs[c]++;
 
        // build tree
        tree = codificador.buildTree(charFreqs);
 
        // print out results
        System.out.println("SYMBOL\tWEIGHT\tHUFFMAN CODE");
        code.IMP_CODIGOS(tree, new StringBuffer());
        
         DefaultTableModel modelo=(DefaultTableModel) tabla.getModel();
            int filas=tabla.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        
            
       modelo=(DefaultTableModel) tabla.getModel(); 
 
       
        
        int tamaño=codificador.simbolos.size();
        if(tamaño>1){
        Object [] fila=new Object[4];
        int tamaño2=0;
        DecimalFormat decimales = new DecimalFormat("0.000");
        for(int j=0;j<tamaño;j++)
        {
        tamaño2+=Double.parseDouble(codificador.frecuencia.get(j));
        }
        for(int j=0;j<tamaño;j++){        
         fila[0]=codificador.simbolos.get(j);
         fila[1]=codificador.frecuencia.get(j);
         fila[2]=decimales.format(Double.parseDouble(codificador.frecuencia.get(j))/tamaño2);
         fila[3]=codificador.codigo.get(j);
        modelo.addRow(fila);
        }
        //Sección 5
        tabla.setModel(modelo); 
        codificador.simbolos.clear();
        codificador.frecuencia.clear();
        codificador.codigo.clear();     
        test_anterior=test;
        }
        else{
        Object [] fila=new Object[4];
         fila[0]=codificador.simbolos.get(0);
         fila[1]=1;
         fila[2]=1;
         fila[3]=0;
         modelo.addRow(fila);
         tabla.setModel(modelo); 
         codificador.simbolos.clear();
         codificador.frecuencia.clear();
         codificador.codigo.clear();     
         test_anterior=test;
        }
        }
  }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField texto;
    // End of variables declaration//GEN-END:variables

}
